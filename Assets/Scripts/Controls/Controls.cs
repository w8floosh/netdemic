//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/Scripts/Controls/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""SimulationInteraction"",
            ""id"": ""1554e18d-6171-4090-9917-9d2345a9c230"",
            ""actions"": [
                {
                    ""name"": ""Zoom In"",
                    ""type"": ""Button"",
                    ""id"": ""497059bb-26b2-4bad-99e2-a777bb3b8cc4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zoom Out"",
                    ""type"": ""Button"",
                    ""id"": ""872f6b7d-1986-43f6-9d7a-407f70781637"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""828dbe24-ba1f-4d5d-ad11-c4dc6eac2caa"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom In"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e981d88-64f4-4614-8351-c7b9cc8fabfd"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom Out"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SimulationInteraction
        m_SimulationInteraction = asset.FindActionMap("SimulationInteraction", throwIfNotFound: true);
        m_SimulationInteraction_ZoomIn = m_SimulationInteraction.FindAction("Zoom In", throwIfNotFound: true);
        m_SimulationInteraction_ZoomOut = m_SimulationInteraction.FindAction("Zoom Out", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SimulationInteraction
    private readonly InputActionMap m_SimulationInteraction;
    private ISimulationInteractionActions m_SimulationInteractionActionsCallbackInterface;
    private readonly InputAction m_SimulationInteraction_ZoomIn;
    private readonly InputAction m_SimulationInteraction_ZoomOut;
    public struct SimulationInteractionActions
    {
        private @Controls m_Wrapper;
        public SimulationInteractionActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ZoomIn => m_Wrapper.m_SimulationInteraction_ZoomIn;
        public InputAction @ZoomOut => m_Wrapper.m_SimulationInteraction_ZoomOut;
        public InputActionMap Get() { return m_Wrapper.m_SimulationInteraction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SimulationInteractionActions set) { return set.Get(); }
        public void SetCallbacks(ISimulationInteractionActions instance)
        {
            if (m_Wrapper.m_SimulationInteractionActionsCallbackInterface != null)
            {
                @ZoomIn.started -= m_Wrapper.m_SimulationInteractionActionsCallbackInterface.OnZoomIn;
                @ZoomIn.performed -= m_Wrapper.m_SimulationInteractionActionsCallbackInterface.OnZoomIn;
                @ZoomIn.canceled -= m_Wrapper.m_SimulationInteractionActionsCallbackInterface.OnZoomIn;
                @ZoomOut.started -= m_Wrapper.m_SimulationInteractionActionsCallbackInterface.OnZoomOut;
                @ZoomOut.performed -= m_Wrapper.m_SimulationInteractionActionsCallbackInterface.OnZoomOut;
                @ZoomOut.canceled -= m_Wrapper.m_SimulationInteractionActionsCallbackInterface.OnZoomOut;
            }
            m_Wrapper.m_SimulationInteractionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ZoomIn.started += instance.OnZoomIn;
                @ZoomIn.performed += instance.OnZoomIn;
                @ZoomIn.canceled += instance.OnZoomIn;
                @ZoomOut.started += instance.OnZoomOut;
                @ZoomOut.performed += instance.OnZoomOut;
                @ZoomOut.canceled += instance.OnZoomOut;
            }
        }
    }
    public SimulationInteractionActions @SimulationInteraction => new SimulationInteractionActions(this);
    public interface ISimulationInteractionActions
    {
        void OnZoomIn(InputAction.CallbackContext context);
        void OnZoomOut(InputAction.CallbackContext context);
    }
}
